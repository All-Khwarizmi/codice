"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateEmailsPreview = void 0;
const log_symbols_1 = __importDefault(require("log-symbols"));
const constants_1 = require("./constants");
const fs_1 = __importDefault(require("fs"));
const ora_1 = __importDefault(require("ora"));
const shelljs_1 = __importDefault(require("shelljs"));
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const generateEmailsPreview = async (emailDir) => {
    try {
        const spinner = (0, ora_1.default)('Generating emails preview').start();
        await createEmailPreviews(emailDir);
        await createStaticFiles(emailDir);
        spinner.stopAndPersist({
            symbol: log_symbols_1.default.success,
            text: 'Emails preview generated',
        });
    }
    catch (error) {
        console.log({ error });
    }
};
exports.generateEmailsPreview = generateEmailsPreview;
const createEmailPreviews = async (emailDir) => {
    const hasPackageEmailsDirectory = fs_1.default.existsSync(constants_1.PACKAGE_EMAILS_PATH);
    if (hasPackageEmailsDirectory) {
        await fs_1.default.promises.rm(constants_1.PACKAGE_EMAILS_PATH, { recursive: true });
    }
    const result = shelljs_1.default.cp('-r', emailDir, constants_1.PACKAGE_EMAILS_PATH);
    if (result.code > 0) {
        throw new Error(`Something went wrong while copying the file to ${constants_1.PACKAGE_EMAILS_PATH}, ${result.cat()}`);
    }
};
const createStaticFiles = async (emailDir) => {
    const reactEmailPublicFolder = path_1.default.join(constants_1.REACT_EMAIL_ROOT, 'public');
    fs_extra_1.default.ensureDir(reactEmailPublicFolder);
    const hasPackageStaticDirectory = fs_1.default.existsSync(reactEmailPublicFolder);
    if (hasPackageStaticDirectory) {
        await fs_1.default.promises.rm(reactEmailPublicFolder, {
            recursive: true,
        });
    }
    // Make sure that the "static" folder does not exists in .react-email/emails
    // since it should only exists in .react-email/public, but the "createEmailPreviews"-function will blindly copy the complete emails folder
    const reactEmailEmailStaticFolder = path_1.default.join(constants_1.REACT_EMAIL_ROOT, 'emails', 'static');
    const hasPackageStaticDirectoryInEmails = fs_1.default.existsSync(reactEmailEmailStaticFolder);
    if (hasPackageStaticDirectoryInEmails) {
        await fs_1.default.promises.rm(reactEmailEmailStaticFolder, {
            recursive: true,
        });
    }
    const staticDir = path_1.default.join(emailDir, 'static');
    const hasStaticDirectory = fs_1.default.existsSync(staticDir);
    if (hasStaticDirectory) {
        const result = shelljs_1.default.cp('-r', staticDir, reactEmailPublicFolder);
        if (result.code > 0) {
            throw new Error(`Something went wrong while copying the file to ${reactEmailPublicFolder}, ${result.cat()}`);
        }
    }
};
